<?xml version="1.0" encoding="utf-8"?>
<!--
ZoÃ« by gskinner.com.
Visit www.gskinner.com/blog for documentation, updates and more free code.

Copyright (c) 2010 Grant Skinner

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
-->

<!--
	Defines the main view for the application.
-->
<s:VGroup xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 width="100%" height="100%" gap="10"
		 xmlns:views="com.gskinner.zoe.views.*"
		 xmlns:controls="com.gskinner.zoe.controls.*"
		 xmlns:ui="com.gskinner.zoe.ui.*"
		 creationComplete="init()"
		 >
	
	<fx:Script>
		<![CDATA[
			import com.gskinner.utils.CallLater;
			import com.gskinner.zoe.controls.ColorPreviewText;
			import com.gskinner.zoe.data.AnimationState;
			import com.gskinner.zoe.data.ExportType;
			import com.gskinner.zoe.data.SourceFileData;
			import com.gskinner.zoe.events.CaptureEvent;
			import com.gskinner.zoe.events.PreviewPanelEvent;
			import com.gskinner.zoe.events.ResultEvent;
			import com.gskinner.zoe.model.FileModel;
			import com.gskinner.zoe.utils.CaptureSWF;
			import com.gskinner.zoe.utils.FindSWFBounds;
			
			import mx.collections.ArrayList;
			import mx.collections.IList;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			
			import spark.components.ToggleButton;
			import spark.events.IndexChangeEvent;
			
			/**
			 * @private
			 * 
			 */
			protected const PLAY:uint = 0;
			
			/**
			 * @private
			 * 
			 */
			protected const PAUSE:uint = 2;
			
			/**
			 * @private
			 * 
			 */
			protected var swfFile:File;
			
			/**
			 * @private
			 * 
			 */
			protected var _playMode:uint;
			
			/**
			 * @private
			 * 
			 */
			protected var lastPlayMode:uint;
			
			/**
			 * @private
			 * 
			 */
			protected var swfCaptureUtil:CaptureSWF;
			
			/**
			 * @private
			 * 
			 */
			protected var previewPanel:PreviewPanel;
			
			/**
			 * @private
			 * 
			 */
			protected var saveFile:File;
			
			/**
			 * @private
			 * 
			 */
			protected var statesDataProvider:ArrayList;
			
			/**
			 * @private
			 * 
			 */
			protected var showGrid:Boolean;
			
			/**
			 * @private
			 * 
			 */
			protected var fileModel:FileModel;
			
			/**
			 * @private
			 * 
			 */
			protected var selectedState:AnimationState;
			
			/**
			 * @private
			 * 
			 */
			protected var currentAnimation:AnimationState;
			
			/**
			 * Loads an array of swfs in, probably from a drag and drop.
			 * 
			 */
			public function loadSwfs(files:Array):void {
				this.removeEventListener(Event.EXIT_FRAME, updatePreviewBounds);
				
				var l:uint = files.length;
				for (var i:uint=0;i<l;i++) {
					var file:File = files[i];
					fileModel.addItem(file);
				}
				
				swfCapture.source = fileModel.selectedItem.sourcePath;
			}
			
			protected function getExportPaddingValue():Number {
				return exportPadding.selected?2:0;
			}
			
			override public function set enabled(value:Boolean):void {
				super.enabled = value;
				if (previewPanel) {
					previewPanel.enabled = value;
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function init():void {
				fileModel = new FileModel();
				fileModel.target = fileList;
				fileModel.swfCapture = swfCapture;
				fileModel.addEventListener(Event.CHANGE, handleListChange, false, 0, true);
				
				swfCapture.fileModel = fileModel;
				
				swfCaptureUtil = new CaptureSWF(fileModel);
				swfCaptureUtil.addEventListener(CaptureEvent.BEGIN, handleCaptureBegin, false, 0, true);
				swfCaptureUtil.addEventListener(ResultEvent.COMPLETE, handleCaptureComplete, false, 0, true);
				swfCaptureUtil.addEventListener(CaptureEvent.INVALID_BITMAP, hadleExportInvalid, false, 0, true);
				swfCaptureUtil.addEventListener(CaptureEvent.INVALID_PATH, hadleExportInvalid, false, 0, true);
				
				mainMenu.addEventListener(IndexChangeEvent.CHANGE, handleMainNavChange, false, 0, true);
				
				swfCapture.addEventListener(CaptureEvent.SWF_INIT, handleCaptureSwfChange, false, 0, true);
				swfCapture.addEventListener(Event.CHANGE, handleCaptureChange, false, 0, true);
				
				addPreview();
				
				playMode = PLAY;
				
				previewPanel.frameSlider.maximum = 0;
				
				addEventListener(Event.EXIT_FRAME, tick);
				
				imageExportList.dataProvider = new ArrayList([
					//Sample of setting a non-square size
					//{label:'SpriteSheet (2048 x 1024)', w:2048, h:1024, size:"2048x1024", type:ExportType.IMAGE_SPRITE_SHEET }, //iOS friendly
					{label:'SpriteSheet (8192 x 8192)', size:8192, type:ExportType.IMAGE_SPRITE_SHEET},
					{label:'SpriteSheet (4096 x 4096)', size:4096, type:ExportType.IMAGE_SPRITE_SHEET},
					{label:'SpriteSheet (2048 x 2048)', size:2048, type:ExportType.IMAGE_SPRITE_SHEET},
					{label:'SpriteSheet (1024 x 1024)', size:1024, type:ExportType.IMAGE_SPRITE_SHEET },
					{label:'SpriteSheet (512 x 512)', size:512, type:ExportType.IMAGE_SPRITE_SHEET },
					{label:'SpriteSheet (256 x 256)', size:256, type:ExportType.IMAGE_SPRITE_SHEET},
					{label:'Frames', type:ExportType.IMAGE_FRAME}
				]);
				
				dataExportList.dataProvider = new ArrayList ([
																{label:'JSON', type:ExportType.DATA_JSON},
																{label:'JSONP', type:ExportType.DATA_JSONP},
																{label:'None', type:ExportType.NONE}
															]);
				
				//Add add some help tooltips
				maintainPowHelpBtn.toolTip = "Will trim spritesheet images to the smallest power of 2 dimensions possible based on the content.";
				maintainPowHelpBtn1.toolTip = "Will make spritesheet images to the smallest based on the content.";
				exportSizesHelpBtn.toolTip = "SpriteSheet: Exports one or more images (based on available size) with multiple frames on each image.\nFrames: Exports individual PNG's for each frame.";
				exportJsonHelpBtn.toolTip = "Exports a JSON file that defines your animations, for use with EaselJS.";
				numFramesHelp.toolTip = "Total number of frames to export, starting from 0, setting to 0 will export everything.";
				refreshBtn.toolTip = "Reloads your swf from disk, if you have changed it.";
				addFileBtn.toolTip = "Browse for a swf file.  You can also drag and drop file(s) onto the application.";
				exportBtn.toolTip = "Exports your animation to disk.";
				deleteButton.toolTip = "Deletes the current item from the list, local files are not modified.";
				exportPaddingHelpBtn.toolTip = "A 2px padding will be put around each frame of the exported animation. Used to prevent antiliasing conflicts.";
				overPaintHelpBtn.toolTip = "For use with padding. Scales each painted frame up by 1px, to prevent GPU drawing errors on edges.";
				scaleHelpBtn.toolTip = "Scale the spritesheet for export."
				thresholdHelpBtn.toolTip = "Adjusting the scaling magnitude or intensity in which frames are to be compared for export.";
				variableFrameDimensionsHelpBtn.toolTip = "Performs rectangle packing optimizing sizing for sprites.";
				
				animationsListHelpBtn.toolTip = "Lists all the animations contained in your swf file.  This we be exported to the JSON.";
				speedStepHelpBtn.toolTip = "Defines the playback speed for this animation. This value is multiplied by the fps setting. The preview will only be an approximation.";
				animationsNextListHelpBtn.toolTip = "Defines the default animation to play next. You can chain animation toegther to play them in any order.";
				fpsHelpBtn.toolTip = "The default framerate to use for all animations.";
				basePathHelpBtn.toolTip = "Appends a path on to each image during export.";
				
				exportView.invalidateDisplayList();
				
				//Delay a few frames to reduce stalling on startup
				CallLater.call(handleListChange, 3, [null]);
			}
			
			protected function addPreview():void {
				previewPanel = new PreviewPanel();
				previewPanel.addEventListener(PreviewPanelEvent.COLOR_CHANGED, handleBgColorChange, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.COLOR_OPEN, handleBackgroundColorOpen, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.COLOR_MOVE, handleColorPickerMove, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.CHANGE_START_FRAME_POSITION, handleSliderStartChange, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.CHANGE_END_FRAME_POSITION, handleSliderEndChange, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.PLAY_CLICKED, togglePlayClick, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.UPDATE_FRAME_POSITION, handlePreviewFramePosition, false, 0, true);
				previewPanel.addEventListener(PreviewPanelEvent.UPDATE_SLIDER_POSITION, updateSliderPosition, false, 0, true);
				previewPanel.enabled = fileList.selectedIndex != -1;
				
				previewPanel.includeInLayout = false;
				updatePreviewPosition();
				addElement(previewPanel);
			}
			
			protected function updatePreviewPosition():void {
				previewPanel.x = (swfCapture.x + swfCapture.width) - (previewPanel.width + 5);
				previewPanel.y = (swfCapture.y + swfCapture.height) - (previewPanel.height + 5);
			}
			
			protected function handleCaptureChange(event:Event):void {
				updateCapture(swfCapture.captureBounds);
				updatePreviewPosition();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function hadleExportInvalid(event:CaptureEvent):void {
				var alert:Alert = Alert.show(event.message);
				alert.validateNow();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleCaptureBegin(event:CaptureEvent):void {
				removeEventListener(Event.ENTER_FRAME, watchStatePlaying);
				swfCapture.visible = false;
				ExportDialog.show();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleCaptureComplete(event:ResultEvent):void {
				ExportDialog.completeExport(fileModel, swfCaptureUtil.exportedImageNames, event.data);
				swfCapture.visible = true;
				stateChange();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleMainNavChange(event:IndexChangeEvent):void {
				tabViews.selectedIndex = event.newIndex;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleCaptureSwfChange(event:CaptureEvent):void {
				previewPanel.frameSlider.minimum = 0;
				previewPanel.frameSlider.maximum = swfCapture.totalFrames;
				
				if (!swfCapture.captureBounds.equals(new Rectangle())) {
					updateUI(swfCapture.captureBounds);
				} else if (!fileModel.selectedItem.variableFrameDimensions) {
					CallLater.call(findBounds, 2);
				}
				
				statesDataProvider = new ArrayList();
				statesDataProvider.addItem({name:'-- Play All --'});
				
				swfCaptureUtil.updateSWF(swfCapture.swfLoader, fileModel.selectedItem.sourcePath);
				var states:Vector.<AnimationState> = swfCaptureUtil.getStates();
				var l:uint = states.length;
				for (var i:uint=0;i<l;i++) {
					var state:AnimationState = states[i];
					statesDataProvider.addItem(state);
				}
				
				var animationsDataProvider:ArrayList = new ArrayList(statesDataProvider.source);
				animationsDataProvider.removeItemAt(0);
				animationsDataProvider.addItemAt({name:'-- none --'}, 0);
				animationsNextList.dataProvider = statesDataProvider;
				animationsList.dataProvider = statesDataProvider;
				animationsList.selectedIndex = 1;
				
				// Populate the defaults
				var nextAnim:String = animationsList.selectedItem==null?'':fileModel.selectedItem.getNextAnimationName(animationsList.selectedItem.name);
				animationsNextList.selectedIndex = getIndexOfName(animationsDataProvider, nextAnim);
				speedStep.value = animationsList.selectedItem==null?0:fileModel.selectedItem.getAnimationSpeed(animationsList.selectedItem.name);
				
				basePathTxt.text = fileModel.selectedItem.basePath;
				
				updateAnimationTab();
				handleStateChange(null);
			}
			
			protected function getIndexOfName(list:ArrayList, name:String):int {
				for (var i:uint=0;i<list.length;i++) {
					if (list.getItemAt(i).name == name) {
						return i;
					}
				}
				return 0;
			}
			
			/* 
			 * @private
			 * 
			 * Called when values in the Animations tab change.
			 * 
			 */
			protected function handleAnimationsChange(event:Event):void {
				if (event.target == animationsList) {
					speedStep.value = fileModel.selectedItem.getAnimationSpeed(animationsList.selectedItem.name);
					animationsNextList.selectedIndex = getIndexOfName(animationsNextList.dataProvider as ArrayList, animationsList.selectedItem.next);
				} else if (event.target == animationsNextList) {
					animationsList.selectedItem.next = animationsNextList.selectedItem is AnimationState?animationsNextList.selectedItem.name:null; 
				}
				
				updateAnimationTab();
				
				callLater(handleStateChange, [null]);
			}
			
			protected function updateAnimationTab():void {
				if (animationsList.selectedItem) {
					fileModel.selectedItem.setAnimationData(animationsList.selectedItem.name, animationsNextList.selectedItem is AnimationState?animationsNextList.selectedItem.name:null, speedStep.value);
					fileModel.saveState();
				}
				
				speedFpsDisplay.text = '('+(frameRateStep.value*speedStep.value).toFixed(2)+' fps)';
			}
			
			/**
			 * @private
			 * 
			 */
			protected function findBounds():void {
				if (!swfCapture.content) { return; }
				
				enabled = false;
				ProgressOverlay.show('Calculating bounds');
				
				//We could be in an state preview, so stop that for now (we'll re-enable after the find bounds is complete).
				removeEventListener(Event.ENTER_FRAME, watchStatePlaying);
				var findBounds:FindSWFBounds = new FindSWFBounds(swfCapture.content, fileModel.selectedItem.frameCount, swfCapture.scale);
				findBounds.addEventListener(Event.COMPLETE, handleFoundBounds);
				findBounds.findBounds();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleFoundBounds(event:Event):void {
				enabled = true;
				
				var bounds:FindSWFBounds = event.target as FindSWFBounds;
				bounds.removeEventListener(Event.COMPLETE, handleFoundBounds);
				ProgressOverlay.hide();
				
				var newBounds:Rectangle = bounds.bounds;
				multiplyBounds(newBounds, swfCapture.scale);
				updateCapture(newBounds);
				updateUI(newBounds);
				
				//Reset the correct play / pause state
				playMode = playMode;
				
				//Reset the correct state
				stateChange();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleListChange(event:Event):void {
				removeEventListener(Event.ENTER_FRAME, watchStatePlaying);
				
				callLater(this.handleFileListChange, [null]);
				
				var item:SourceFileData = fileModel.selectedItem;
				
				if (item == null) {
					swfCapture.source = null;
					exportPadding.selected = false;
					overPaint.selected = false;
					numFramesStep.value = 0;
					threshold.value = 0;
					sourcePathTxt.text = '';
					sourceNameTxt.text = '';
					destinationTxt.text = '';
					reuseFramesChk.selected = false;
					swfCapture.scale = 1;
					frameRateStep.value = 24;
					
					dataExportList.selectedIndex = 0;
					imageExportList.selectedIndex = 0;
					
					variableFrameDimensions.selected = false;
				} else {
					swfCapture.source = item.sourcePath;
					exportPadding.selected = item.exportPadding > 0;
					threshold.value = isNaN(item.threshold) ? 0.5 : item.threshold;
					
					thresholdLbl.text = String(Math.round(threshold.value*100));
					reuseFramesChk.selected = item.reuseFrames;
					variableFrameDimensions.selected = item.variableFrameDimensions;
					
					if (getExportPaddingValue() > 1) { swfCapture.padding = getExportPaddingValue(); }
					overPaint.selected = item.overPaint;
					swfCapture.scale = item.scale;
					
					sourcePathTxt.text = unescapeMultiByte(item.sourcePath);
					sourceNameTxt.text = unescapeMultiByte(item.name);
					destinationTxt.text = unescapeMultiByte(item.destinationPath);
					showGrid = item.showGrid !== false;
					
					previewPanel.selectedColor = item.backgroundColor;
					previewPanel.updateColorPickerSkin(showGrid);
					numFramesStep.value = item.frameCount || 0;
					
					maintainPow2Chk.selected = item.maintainPow2;
					maintainMinSizeChk.selected = item.maintainMinSize;
					
					frameRateStep.value = item.fps;
					
					imageExportList.selectedIndex = getListItemIndexByType(imageExportList.dataProvider as ArrayList, item.imageExportType);
					dataExportList.selectedIndex = getListItemIndexByType(dataExportList.dataProvider as ArrayList, item.dataExportType);
					jsonpCallbackName.visible = jsonpCallbackName.includeInLayout = (item.dataExportType == ExportType.DATA_JSONP);
					jsonpCallbackName.text = item.jsonpCallback;
					
					var bitmapWidth:Number = item.bitmapWidth || 0;
					var bitmapHeight:Number = item.bitmapHeight || 0;
					
					var exportSizes:IList = imageExportList.dataProvider;
					var l:uint = exportSizes.length;
					for (var i:uint=0;i<l;i++) {
						var row:Object = exportSizes.getItemAt(i);
						if (row.size is Number && row.size == bitmapWidth || row.size is String && row.w == bitmapWidth && row.h == bitmapHeight) {
							imageExportList.selectedIndex = i; break;
						}
					}
					
					changeImageExportType();
					changeDataExportType();
					
					updateCapture(item.frameBounds);
					updateUI(swfCapture.captureBounds);
					updateViewFromColorChange();
				}
				
				handleFrameRateChange();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function getListItemIndexByType(array:ArrayList, value:String):int {
				var l:uint = array.length;
				for (var i:uint=0;i<l;i++) {
					if (array.getItemAt(i).type == value) {
						return i;
					}
				}
				return 0;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function findBitmapIndex(value:String):int {
				var l:uint = imageExportList.dataProvider.length;
				for (var i:uint=0;i<l;i++) {
					if (imageExportList.dataProvider.getItemAt(i).type == value) {
						return i;
					}
				}
				return -1;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateCapture(bounds:Rectangle=null):void {
				if (bounds == null) { return; }
				swfCapture.captureBounds = bounds;
				
				fileModel.setSelectedBounds(bounds.x, bounds.y, bounds.width, bounds.height, fileModel.selectedItem.exportPadding);
				fileModel.setSelectedBitmapSize(fileModel.selectedItem.bitmapWidth, fileModel.selectedItem.bitmapHeight);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateUI(bounds:Rectangle):void {
				if (bounds == null) { return; }
				
				var padding:uint = 0;
				if (fileModel.selectedItem && fileModel.selectedItem.frameBounds) {
					padding = fileModel.selectedItem.exportPadding || 0;
				}
				scaleValue.value = fileModel.selectedItem.scale;
				
				swfCapture.padding = padding;
				fileModel.setSelectedBounds(bounds.x, bounds.y, bounds.width, bounds.height, padding);
				
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleBrowseClick():void {
				swfFile = new File();
				swfFile.addEventListener(Event.SELECT, handleFileSelect);
				swfFile.browseForOpen('Find SWF file', [new FileFilter('SWF File', '*.swf')]);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleFileSelect(event:Event):void {
				swfCapture.source = swfFile.url;
				fileModel.addItem(swfFile);
				playMode = PLAY;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleUpdateSourceClick():void {
				swfFile = new File();
				swfFile.addEventListener(Event.SELECT, handleSourceFileSelect);
				swfFile.browseForOpen('Find SWF file', [new FileFilter('SWF File', '*.swf')]);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSourceFileSelect(event:Event):void {
				swfCapture.source = swfFile.url;
				fileModel.updateSelectedSourceFile(swfFile);
				playMode = PLAY;
				handleListChange(null);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSwfChange():void {
				previewPanel.frameSlider.maximum = swfCapture.totalFrames;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateSliderPosition():void {
				previewPanel.frameSlider.value = Math.min(Number(previewPanel.frameNumDisplay.text), swfCapture.totalFrames);
				previewPanel.frameNumDisplay.text = previewPanel.frameSlider.value+''; 
				updatePreviewFramePosition();
			}
			
			protected function handlePreviewFramePosition(event:PreviewPanelEvent):void {
				updatePreviewFramePosition();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updatePreviewFramePosition():void {
				previewPanel.totalFrames = (swfCapture != null?swfCapture.totalFrames:0)
				swfCapture.gotoAndStop(previewPanel.frameSlider.value);
				updatePreviewBounds(null);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function tick(e:Event):void {
				if (playMode == PLAY) {
					var frameNum:int = swfCapture.currentFrame;
					previewPanel.frameSlider.value = frameNum;
					previewPanel.frameNumDisplay.text = frameNum+'';
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSliderStartChange(event:PreviewPanelEvent):void {
				lastPlayMode = playMode;
				playMode = PAUSE;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSliderEndChange(event:PreviewPanelEvent):void {
				playMode = lastPlayMode;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function set playMode(value:uint):void {
				_playMode = value;
				previewPanel.playPauseBtn.selected = value == PLAY;
				
				if (playMode == PLAY && swfCapture) {
					swfCapture.play();
				} else if (swfCapture) {
					swfCapture.stop();
				}
				
				if (playMode == PLAY) {
					handleStateChange(null);
				} else {
					removeEventListener(Event.ENTER_FRAME, watchStatePlaying);
				}
				
				updateLiveBoundsUpdate();
			}
			
			protected function updateLiveBoundsUpdate():void {
				if (fileModel.selectedItem == null) { return; }
				
				if (_playMode == PLAY && swfCapture && this.variableFrameDimensions.selected) {
					this.addEventListener(Event.EXIT_FRAME, updatePreviewBounds, false, 0, true);
					swfCapture.mouseEnabled = false;
					updateUI(null);
				} else if (!this.variableFrameDimensions.selected) {
					this.removeEventListener(Event.EXIT_FRAME, updatePreviewBounds);
					updateCapture((fileModel.selectedItem as SourceFileData).frameBounds);
					updateUI(swfCapture.captureBounds);
					swfCapture.mouseEnabled = true;
				}
			}
			
			protected function updatePreviewBounds(event:Event):void {
				var bounds:Rectangle = swfCaptureUtil.getCurrentFrameBounds();
				multiplyBounds(bounds, swfCapture.scale);
				swfCapture.captureBounds = bounds;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function get playMode():uint {
				return _playMode;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function togglePlayClick(event:PreviewPanelEvent):void {
				playMode = previewPanel.playPauseBtn.selected?PLAY:PAUSE;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function refreshSWF():void {
				swfCapture.refresh();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function get captureBounds():Rectangle {
				var captureBounds:Rectangle;
				var bounds:Object = fileModel.selectedItem.frameBounds;
				if (bounds && fileModel.selectedItem.exportPadding > 0) {
					captureBounds = new Rectangle(bounds.x, bounds.y, bounds.width, bounds.height);
					captureBounds.inflate(fileModel.selectedItem.exportPadding, fileModel.selectedItem.exportPadding);
				}
				return captureBounds;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function deleteAnimation():void {
				fileModel.deleteSelected();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleFrameRateChange():void {
				if (!currentAnimation) {
					stage.frameRate = frameRateStep.value;
				} else {
					stage.frameRate = Math.max(1, currentAnimation.speed * frameRateStep.value);
				}
				
				fileModel.selectedItem.fps = frameRateStep.value;
				updateAnimationTab();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleBgColorChange(event:PreviewPanelEvent):void {
				var alphaBtn:ToggleButton = ColorPreviewText.getInstance().toggleTransparencyButton;
				alphaBtn.selected = false;
				showGrid = false;
				previewPanel.updateColorPickerSkin(showGrid);
				updateViewFromColorChange();
			}
			
			/**
			 * @private
			 * Ensures that when ColorPicker is moused over cursor will be set to arrow.
			 */
			protected function handleColorPickerMove(event:PreviewPanelEvent):void {
				if (Mouse.cursor != MouseCursor.AUTO) {
					Mouse.cursor = MouseCursor.AUTO;
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleColorTransprencyChange(event:MouseEvent):void {
				showGrid = event.target.selected;
				previewPanel.updateColorPickerSkin(showGrid);
				updateViewFromColorChange();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function updateViewFromColorChange():void {
				swfCapture.setBackgroundColor(showGrid, previewPanel.selectedColor);
				fileModel.setSelectedColor(showGrid, previewPanel.selectedColor);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleToleranceChange():void {
				swfCaptureUtil.threshold = threshold.value;
				fileModel.setSelectedThreshold(threshold.value);
				this.thresholdLbl.text = String(Math.round(threshold.value * 100)); 
			}
			
			/**
			 * @private
			 * 
			 */
			protected function changeImageExportType():void {
				var w:Number; 
				var h:Number;
				
				var o:Object = imageExportList.selectedItem;
				
				var option:String = o.type;
				if (o.size is Number) {
					h = w = imageExportList.selectedItem.size;
				} else {
					w = o.w;
					h = o.h;
				}
				
				fileModel.setSelectedBitmapSize(w, h);
				fileModel.selectedItem.imageExportType = option;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleExportPow2Change():void {
				fileModel.setMaintainPow2(maintainPow2Chk.selected);
			}
			
			protected function handleExportMinSizeChange():void 
			{
				fileModel.setMaintainMinSize(maintainMinSizeChk.selected);
			}
			
			protected function changeDataExportType():void {
				var option:String = dataExportList.selectedItem.type;
				fileModel.selectedItem.dataExportType = option;
			}
			
			protected function handleBasePathChange():void {
				fileModel.selectedItem.basePath = basePathTxt.text;
				fileModel.saveState();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleNumFramesStepChange():void {
				if (isNaN(numFramesStep.value)) {
					numFramesStep.value = 0;
				}
				
				fileModel.selectedFrameCount = numFramesStep.value;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function showEasel():void {
				navigateToURL(new URLRequest('http://www.easeljs.com'));
			}
			
			/**
			 * @private
			 * 
			 */
			protected function formatStateLabel(value:Object):String {
				return value == null?'':value.name;
			}
			
			/**
			 * @private
			 * 
			 */
			
			protected function stateChange():void {
				removeEventListener(Event.ENTER_FRAME, watchStatePlaying);
				playMode = PLAY;
			}
			
			protected function handleStateChange(event:PreviewPanelEvent):void {
				if (swfCapture.content == null) { return; }
				
				if (animationsList.selectedItem is AnimationState) {
					animationsList.selectedItem.speed = speedStep.value;
				}
				
				if (animationsList.selectedItem is AnimationState) {
					selectedState = animationsList.selectedItem;
					animationsList.selectedIndex = getIndexOfName(animationsList.dataProvider as ArrayList, selectedState.name);
					
					currentAnimation = selectedState;
					stage.frameRate = Math.max(1, currentAnimation.speed * frameRateStep.value);
					
					swfCapture.content.gotoAndStop(selectedState.startFrame+1);
					addEventListener(Event.ENTER_FRAME, watchStatePlaying);
					previewPanel.playPauseBtn.selected = true;
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function watchStatePlaying(event:Event):void {
				if (variableFrameDimensions.selected) {
					callLater(updatePreviewBounds, [null]);
				}
				
				var nextArrayList:ArrayList = animationsNextList.dataProvider as ArrayList;
				var nextIndex:int = getIndexOfName(nextArrayList, currentAnimation.next);
				
				if (nextIndex > -1) {
					var next:AnimationState = nextArrayList.getItemAt(nextIndex) as AnimationState;
				}
				
				if (swfCapture.content.currentFrame == currentAnimation.endFrame+1) {
					if (next) {
						currentAnimation = next;
						stage.frameRate = Math.max(1, currentAnimation.speed * frameRateStep.value);
						swfCapture.content.gotoAndStop(next.startFrame+1);
					} else {
						swfCapture.content.gotoAndStop(currentAnimation.startFrame+1);
					}
				} else {
					swfCapture.content.gotoAndStop(swfCapture.content.currentFrame+1);
				}
			}
			
			/**
			 * @private
			 * 
			 */
			protected function export():void {
				var selectedFile:SourceFileData = fileModel.selectedItem;
				
				if (selectedFile.imageExportType == ExportType.NONE && selectedFile.dataExportType == ExportType.NONE) {
					var alert:Alert = Alert.show('There is nothing to export.', 'Error', Alert.OK, FlexGlobals.topLevelApplication as Sprite, handleConfirmNoExport);
					alert.validateNow();
					return;
				}
				
				var bounds:Rectangle = swfCapture.captureBounds;
				bounds.inflate(getExportPaddingValue(), getExportPaddingValue());
				swfCaptureUtil.threshold = threshold.value;
				swfCaptureUtil.capture();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleConfirmNoExport(event:Event):void {
				mainMenu.selectedIndex = 3;
				tabViews.selectedIndex = 3;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleExportPaddingChange():void {
				var bounds:Rectangle = fileModel.swfCapture.captureBounds;
				createBoundPreview(bounds);
				fileModel.setSelectedBounds(bounds.x, bounds.y, bounds.width, bounds.height, getExportPaddingValue());
				if (!exportPadding.selected) {
					overPaint.selected = false;
					handleOverPaintChange();
				}
			}
			
			protected function handleOverPaintChange():void {
				fileModel.setOverPaint(overPaint.selected);
			}
			
			protected function handleScaleChange():void {
				var bounds:Rectangle;
				if (!variableFrameDimensions.selected) {
					bounds = swfCapture.captureBounds;
					multiplyBounds(bounds, 1/swfCapture.scale); // Normalize
					multiplyBounds(bounds, scaleValue.value);
					swfCapture.captureBounds = bounds;
				}
				
				if (isNaN(scaleValue.value)) {
					scaleValue.value = 1;
				}
				
				swfCapture.scale = scaleValue.value;
				
				
				fileModel.setSelectedScale(scaleValue.value);
				
				bounds = swfCapture.captureBounds;
				createBoundPreview(bounds);
				fileModel.setSelectedBounds(bounds.x, bounds.y, bounds.width, bounds.height, getExportPaddingValue());
			}
			
			protected function createBoundPreview(bounds:Rectangle):void {
				swfCapture.padding = getExportPaddingValue();
				swfCapture.updatePadding();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleBackgroundColorOpen(event:PreviewPanelEvent):void {
				var alphaBtn:ToggleButton = ColorPreviewText.getInstance().toggleTransparencyButton;
				alphaBtn.selected = fileModel.selectedItem.showGrid;
				alphaBtn.addEventListener(MouseEvent.CLICK, handleColorTransprencyChange, false, 0,true);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleSourceNameChange():void {
				fileModel.selectedName = sourceNameTxt.text;
				fileList.labelDisplay.text = sourceNameTxt.text;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function findDestination():void {
				var file:File = new File(destinationTxt.text == ''?null:destinationTxt.text);
				file.addEventListener(Event.SELECT, handleFoundDestination, false, 0, true);
				file.browseForDirectory('Browse for destination');
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleFoundDestination(event:Event):void {
				var file:File = event.target as File;
				file.removeEventListener(Event.SELECT, handleFoundDestination);
				
				if (file.url == null) { return; }
				
				fileModel.selectedDestinationPath = file.url;
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleExportFormatChange(event:Event):void {
				var value:Boolean;
				if (event.target is DropDownList) {
					var option:String = ((event.target as DropDownList).selectedItem).type;
				} else if (event.target is CheckBox) {
					value = (event.target as CheckBox).selected;
				}
				
				switch (event.target) {
					case variableFrameDimensions:
						fileModel.selectedItem.variableFrameDimensions = value;
						updateLiveBoundsUpdate();
						if (!value) {
							findBounds();
						}
						break;
					case reuseFramesChk:
						fileModel.selectedItem.reuseFrames = value; 
						swfCaptureUtil.threshold = (value) ? threshold.value : 0;
						break;
					case dataExportList:
						fileModel.selectedItem.dataExportType = option;
						jsonpCallbackName.visible = jsonpCallbackName.includeInLayout = (option == ExportType.DATA_JSONP);
						break;
					case imageExportList:
						fileModel.selectedItem.imageExportType = option;
						break;
					case jsonpCallbackName:
						fileModel.selectedItem.jsonpCallback = jsonpCallbackName.text.length == 0?'callback':jsonpCallbackName.text;
						break;
				}
				
				fileModel.saveState();
			}
			
			/**
			 * @private
			 * 
			 */
			protected function formatFileListLabel(item:SourceFileData):String {
				return unescapeMultiByte(item.name);
			}
			
			/**
			 * @private
			 * 
			 */
			protected function handleToleranceEnter():void {
				var value:Number  = Number(this.thresholdLbl.text);
				if (value > 100) {
					value = 100;
				} 
				this.threshold.value = value/100;
				this.thresholdLbl.text = String(Math.round(this.threshold.value*100));
				
				fileModel.setSelectedThreshold(threshold.value);
				
				swfCaptureUtil.threshold = threshold.value; 
			}
			
			/**
			 * @private
			 * 
			 */
			protected function formatToleranceLbl(value:String):String {
				return 'Threshold ' + Math.round(Number(value)*100) + ' of ' + 100;
			}
			
			private function multiplyBounds(bounds:Rectangle, scale:Number):void {
				bounds.x *= scale;
				bounds.y *= scale;
				bounds.width *= scale;
				bounds.height *= scale;
			}
			
			protected function handleFileListChange(event:IndexChangeEvent):void {
				previewPanel.enabled = fileList.selectedIndex != -1;
			}
			
		]]>
	</fx:Script>
	
	<!-- File controls -->
	<s:SkinnableContainer width="100%" backgroundColor="0xffffff" mouseEnabled="false">
		<s:layout>
			<s:HorizontalLayout verticalAlign="top" />
		</s:layout>
		<s:HGroup verticalAlign="bottom">
			<s:Label id="appTitle" text="ZoÃ«" styleName="appTitleLarge" paddingRight="0" paddingBottom="-3"/>
			<s:Label id="appSubTitle" text="by gskinner.com" styleName="appTitleSmall"/>
		</s:HGroup>
		<s:HGroup verticalAlign="bottom" width="100%">
			<s:DropDownList id="fileList" labelFunction="formatFileListLabel" change="handleFileListChange(event)" prompt="Browse for a swf file or drag files onto the application." height="18" width="100%" />
			<s:Button id="addFileBtn" styleName="addFileButton" click="handleBrowseClick()" />
			<s:Button id="deleteButton" styleName="deleteButton" click="deleteAnimation()" />
			<s:Button id="refreshBtn" styleName="refreshButton" click="refreshSWF()" />
		</s:HGroup>
		<s:Button id="exportBtn" styleName="exportButton" label="Export" enabled="{fileList.selectedIndex != -1}" click="export()" />
	</s:SkinnableContainer>
	
	<controls:Menu id="mainMenu" tabChildren="false" tabEnabled="false" />
	
	<mx:ViewStack id="tabViews" creationPolicy="all" height="60" width="100%" backgroundColor="0xffffff">
		
		<!-- Basic View -->
		<s:NavigatorContent width="100%" height="100%" enabled="{fileList.selectedIndex != -1}">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:HGroup>
				<s:RichText text="Name" styleName="contentText" width="{browseForFolderBtn.x+browseForFolderBtn.width}" />
				<s:RichText text="Source" styleName="contentText" width="{browseForDestinationBtn.width + sourcePathTxt.width+5}" />
				<s:RichText text="Output" styleName="contentText" />
			</s:HGroup>
			<s:HGroup width="100%" height="100%" verticalAlign="top">
				<s:TextInput id="sourceNameTxt" width="33%" change="handleSourceNameChange()" />
				<s:Button id="browseForFolderBtn" styleName="folderButton" click="handleUpdateSourceClick();" />
				<s:TextInput id="sourcePathTxt" width="33%" editable="false" />
				<s:Button id="browseForDestinationBtn" styleName="folderButton" click="findDestination();" />
				<s:TextInput id="destinationTxt" fontFamily="_sans" width="33%" editable="false" />
			</s:HGroup>
		</s:NavigatorContent>
		
		<!-- Settings View -->
		<s:NavigatorContent id="boundsView" width="100%" height="100%" enabled="{fileList.selectedIndex != -1}">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			
			<s:HGroup id="boundsLabelView" gap="10" width="100%">
				<s:RichText text="Bounds" styleName="contentText" />
				<s:Spacer width="165" />
				<s:RichText text="Scale" styleName="contentText" />
				<mx:Spacer width="26" />
				<s:RichText text="Reuse Frames" width="{threshold.width-this.x+1}" styleName="contentText" />
				<s:RichText text="fps" styleName="contentText" />
			</s:HGroup>
			
			<s:HGroup width="100%" height="100%" verticalAlign="top" gap="10">
				<s:VGroup>
					<s:HGroup>
						<s:CheckBox id="exportPadding" label="Padding" change="handleExportPaddingChange();" />
						<s:Button id="exportPaddingHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
					
					<s:HGroup paddingLeft="5">
						<s:CheckBox id="overPaint" enabled="{exportPadding.selected}" label="Over Paint" change="handleOverPaintChange();" />
						<s:Button id="overPaintHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
				</s:VGroup>
				
				<s:VGroup>
					<s:HGroup>
						<s:CheckBox id="variableFrameDimensions" label="Variable Frame" change="handleExportFormatChange(event)"/>
						<s:Button id="variableFrameDimensionsHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
					<s:Button label="Update Bounds" styleName="simpleButton" enabled="{!variableFrameDimensions.selected}"  click="findBounds()" />
				</s:VGroup>
				
				<s:NumericStepper id="scaleValue" width="50" height="20" minimum="0.25" maximum="10" value="1" stepSize="0.25" change="handleScaleChange()" />
				<s:Button id="scaleHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
				
				<s:VGroup width="100%">
					<s:HGroup width="100%">
						<s:CheckBox id="reuseFramesChk" label="Reuse" change="handleExportFormatChange(event)"/>
						<s:Button id="thresholdHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
						<s:Spacer width="100%" />
						<s:TextInput id="thresholdLbl" restrict="[0-9]" width="35" enabled="{threshold.enabled}" enter="handleToleranceEnter()" />
					</s:HGroup>
					
					<s:HGroup paddingTop="5" width="100%">
						<s:HSlider id="threshold" width="100%" dataTipFormatFunction="formatToleranceLbl" enabled="{reuseFramesChk.selected}" change="handleToleranceChange()" maximum="1" minimum="0.01" stepSize="0.01" />
					</s:HGroup>
				</s:VGroup>
				
				<s:NumericStepper id="frameRateStep" minimum="1" maximum="60" width="45" value="24" change="handleFrameRateChange()" />
				<s:Button id="fpsHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
			</s:HGroup>
		</s:NavigatorContent>
		
		<!-- Animations View -->
		<s:NavigatorContent id="animationsView" width="100%" height="100%" enabled="{fileList.selectedIndex != -1}">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:HGroup>
				<s:RichText text="Animation" styleName="contentText" width="{animationsList.width+13+animationsListHelpBtn.width}" />
				<s:RichText text="Speed" styleName="contentText" width="{speedStep.width+23+speedStepHelpBtn.width}" />
				<s:RichText text="Next" styleName="contentText" width="{animationsNextList.width+animationsNextListHelpBtn.width+13}" />
			</s:HGroup>
			<s:HGroup width="100%" height="100%" verticalAlign="top" gap="10">
				<s:DropDownList id="animationsList" width="50%" labelField="name" change="handleAnimationsChange(event);" />
				<s:Button id="animationsListHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
				
				<s:VGroup gap="0">
					<s:NumericStepper id="speedStep" change="handleAnimationsChange(event);" stepSize=".1" minimum="0" maximum="100" width="45" />
					<s:RichText id="speedFpsDisplay" styleName="smallText" paddingTop="10" />
				</s:VGroup>
				<s:Button id="speedStepHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
				
				<s:DropDownList id="animationsNextList" width="50%" labelField="name" change="handleAnimationsChange(event);" />
				<s:Button id="animationsNextListHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
			</s:HGroup>
		</s:NavigatorContent>
		
		<!-- Export View -->
		<s:NavigatorContent id="exportView" width="100%" height="100%" enabled="{fileList.selectedIndex != -1}">
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			<s:HGroup>
				<s:RichText id="framesLbl" text="Frames" styleName="contentText" width="{numFramesStep.width+numFramesHelp.width+7}" />
				<s:RichText text="Export" styleName="contentText" width="{basePathTxt.x - framesLbl.width-10}" />
				<s:RichText text="Base path" styleName="contentText" width="{basePathTxt.width+basePathHelpBtn.width}" />
				<s:RichText text="Data type" styleName="contentText" />
			</s:HGroup>
			<s:HGroup width="100%" height="100%" verticalAlign="top">
				<s:NumericStepper id="numFramesStep" width="50" height="20" maximum="999" change="handleNumFramesStepChange()" />
				<s:Button id="numFramesHelp" styleName="helpButton" useHandCursor="false" buttonMode="false" />
				
				<s:VGroup>
					<s:HGroup>
						<s:DropDownList id="imageExportList" height="18" width="180" change="changeImageExportType()" />
						<s:Button id="exportSizesHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
					
					<s:HGroup>
						<s:CheckBox id="maintainPow2Chk" label="Trim" change="handleExportPow2Change();" />
						<s:Button id="maintainPowHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
						<s:CheckBox id="maintainMinSizeChk" label="Min Size" change="handleExportMinSizeChange();" />
						<s:Button id="maintainPowHelpBtn1" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
				</s:VGroup>
				
				<s:TextInput id="basePathTxt" width="75%" change="handleBasePathChange();" />
				<s:Button id="basePathHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
				
				<s:VGroup>
					<s:HGroup>
					<s:DropDownList id="dataExportList" width="100" change="handleExportFormatChange(event)" />
						<s:Button id="exportJsonHelpBtn" styleName="helpButton" useHandCursor="false" buttonMode="false" />
					</s:HGroup>
					
						<s:TextInput id="jsonpCallbackName" includeInLayout="false" visible="false" width="100%" change="handleExportFormatChange(event);" />
					
				</s:VGroup>
			</s:HGroup>
		</s:NavigatorContent>
		
	</mx:ViewStack>
	
	<ui:Divider width="100%" height="2" color="0x666666" />
	
	<!-- Displays the loaded swf -->
	<views:CapturePreview id="swfCapture" />
	
</s:VGroup>
